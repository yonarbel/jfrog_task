name: Build, Scan & Deploy to JFrog

# Temporarily disable by commenting out the trigger
#on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean
      docker_tag:
        description: 'Docker image tag'
        required: false
        default: 'latest'
        type: string

env:
  NODE_VERSION: '18'
  REGISTRY_URL: ${{ secrets.JFROG_REGISTRY_URL }}
  DOCKER_REPO: ${{ secrets.JFROG_DOCKER_REPO }}
  BUILD_NAME: "user-management-service"
  BUILD_NUMBER: ${{ github.run_number }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      build-name: ${{ env.BUILD_NAME }}
      build-number: ${{ env.BUILD_NUMBER }}
      docker-tag: ${{ steps.vars.outputs.docker-tag }}
    steps:
      - name: Set variables
        id: vars
        run: |
          if [ "${{ github.event.inputs.docker_tag }}" != "" ]; then
            echo "docker-tag=${{ github.event.inputs.docker_tag }}" >> $GITHUB_OUTPUT
          else
            echo "docker-tag=latest" >> $GITHUB_OUTPUT
          fi

  test:
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm i

      - name: Run linting
        run: npm run lint
        continue-on-error: true

      - name: Run tests
        run: npm test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            junit.xml

  build:
    runs-on: ubuntu-latest
    needs: [setup, test]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ secrets.JFROG_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}

      - name: Configure JFrog CLI
        run: jf npm-config --global=true --repo-resolve=devrel-npm --repo-deploy=devrel-npm


      - name: Install dependencies
        run: |
          jf npm install --build-name=${{ env.BUILD_NAME }} --build-number=${{ env.BUILD_NUMBER }}

      - name: Build application
        run: |
          npm run build
          jf rt upload "dist/**" npm-local/user-management-service/${{ env.BUILD_NUMBER }}/ --build-name=${{ env.BUILD_NAME }} --build-number=${{ env.BUILD_NUMBER }}

      - name: Create npm package
        run: |
          npm pack
          jf rt upload "*.tgz" devrel-npm/ --build-name=${{ env.BUILD_NAME }} --build-number=${{ env.BUILD_NUMBER }}

      - name: Collect build info
        run: |
          jf rt build-collect-env ${{ env.BUILD_NAME }} ${{ env.BUILD_NUMBER }}
          jf rt build-add-git ${{ env.BUILD_NAME }} ${{ env.BUILD_NUMBER }}

  docker-build:
    runs-on: ubuntu-latest
    needs: [setup, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ secrets.JFROG_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}

      - name: Docker login to JFrog
        run: |
          echo "${{ secrets.JFROG_ACCESS_TOKEN }}" | docker login ${{ env.REGISTRY_URL }} -u ${{ secrets.JFROG_USERNAME }} --password-stdin

      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGISTRY_URL }}/${{ env.DOCKER_REPO }}/user-management-service:${{ needs.setup.outputs.docker-tag }} \
                      -t ${{ env.REGISTRY_URL }}/${{ env.DOCKER_REPO }}/user-management-service:${{ env.BUILD_NUMBER }} \
                      --build-arg BUILD_NUMBER=${{ env.BUILD_NUMBER }} \
                      --build-arg COMMIT_SHA=${{ github.sha }} .

      - name: Push Docker image
        run: |
          docker push ${{ env.REGISTRY_URL }}/${{ env.DOCKER_REPO }}/user-management-service:${{ needs.setup.outputs.docker-tag }}
          docker push ${{ env.REGISTRY_URL }}/${{ env.DOCKER_REPO }}/user-management-service:${{ env.BUILD_NUMBER }}

      - name: Add Docker image to build info
        run: |
          jf rt build-docker-create ${{ env.DOCKER_REPO }} --image-file Dockerfile --build-name=${{ env.BUILD_NAME }} --build-number=${{ env.BUILD_NUMBER }}

  security-scan:
    runs-on: ubuntu-latest
    needs: [setup, docker-build]
    steps:
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ secrets.JFROG_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}

      - name: Configure JFrog CLI
        run: |
          jf config add --interactive=false --url=${{ secrets.JFROG_URL }} --access-token=${{ secrets.JFROG_ACCESS_TOKEN }}

      - name: Scan Docker image with Xray
        run: |
          echo "Scanning Docker image for vulnerabilities..."
          jf docker scan ${{ env.REGISTRY_URL }}/${{ env.DOCKER_REPO }}/user-management-service:${{ needs.setup.outputs.docker-tag }}
        continue-on-error: true

      - name: Scan npm packages
        run: |
          echo "Scanning npm packages for vulnerabilities..."
          jf audit --npm
        continue-on-error: true

      - name: Generate SBOM
        run: |
          echo "Generating Software Bill of Materials..."
          jf scan ${{ env.REGISTRY_URL }}/${{ env.DOCKER_REPO }}/user-management-service:${{ needs.setup.outputs.docker-tag }} --format=simple-json > sbom.json
        continue-on-error: true

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sbom-report
          path: sbom.json

  publish-build:
    runs-on: ubuntu-latest
    needs: [setup, build, docker-build, security-scan]
    if: always()
    steps:
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ secrets.JFROG_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}

      - name: Configure JFrog CLI
        run: |
          jf config add --interactive=false --url=${{ secrets.JFROG_URL }} --access-token=${{ secrets.JFROG_ACCESS_TOKEN }}

      - name: Publish build info
        run: |
          echo "Publishing build information to JFrog..."
          jf rt build-publish ${{ env.BUILD_NAME }} ${{ env.BUILD_NUMBER }}

      - name: Promote build
        if: ${{ github.event.inputs.environment == 'prod' }}
        run: |
          echo "Promoting build to production..."
          jf rt build-promote ${{ env.BUILD_NAME }} ${{ env.BUILD_NUMBER }} prod-local \
            --status="Production Ready" \
            --comment="Promoted via GitHub Actions" \
            --copy=true \
            --dependencies=true

  notify:
    runs-on: ubuntu-latest
    needs: [setup, test, build, docker-build, security-scan, publish-build]
    if: always()
    steps:
      - name: Build Status Summary
        run: |
          echo "## ðŸš€ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Name**: ${{ env.BUILD_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Number**: ${{ env.BUILD_NUMBER }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Tag**: ${{ needs.setup.outputs.docker-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests**: ${{ needs.test.result || 'Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build**: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker**: ${{ needs.docker-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan**: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Publish**: ${{ needs.publish-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“¦ Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Image: \`${{ env.REGISTRY_URL }}/${{ env.DOCKER_REPO }}/user-management-service:${{ needs.setup.outputs.docker-tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Build Info: Available in JFrog Artifactory" >> $GITHUB_STEP_SUMMARY

      - name: Deployment Instructions
        if: ${{ needs.publish-build.result == 'success' }}
        run: |
          echo "## ðŸŽ¯ Deployment Ready" >> $GITHUB_STEP_SUMMARY
          echo "Your application has been successfully built and is ready for deployment!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quick Deploy Commands:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Pull and run the image" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY_URL }}/${{ env.DOCKER_REPO }}/user-management-service:${{ needs.setup.outputs.docker-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "docker run -p 3000:3000 ${{ env.REGISTRY_URL }}/${{ env.DOCKER_REPO }}/user-management-service:${{ needs.setup.outputs.docker-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY 
